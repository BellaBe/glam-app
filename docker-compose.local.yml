# docker-compose.local.yml
# Infrastructure services only for local development
# Run application services locally with 'make run-service SERVICE=xxx'
services:
  # ----------------- Message Broker -----------------
  nats:
    image: nats:2.10.7-alpine
    container_name: glam-nats-local
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # Monitoring
    command: ["nats-server", "-m", "8222", "-js", "--store_dir", "/data"]
    volumes:
      - nats-local-data:/data
    networks:
      - glam-local-net
    healthcheck:
      test: ["CMD", "nats-server", "-v"]
      interval: 10s
      retries: 5
      start_period: 10s

  # ----------------- Cache -----------------
  redis:
    image: redis:7-alpine
    container_name: glam-redis-local
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-local-data:/data
    networks:
      - glam-local-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 10s

  # ----------------- Email Testing (MailHog) -----------------
  mailhog:
    image: mailhog/mailhog:latest
    container_name: glam-mailhog-local
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - glam-local-net
    logging:
      driver: 'none'  # Disable excessive logging
    healthcheck:
      test: ["CMD", "echo", "mailhog is running"]
      interval: 10s
      retries: 5
      start_period: 5s

  # ----------------- Catalog Database -----------------
  catalog-db:
    image: postgres:15-alpine
    container_name: catalog-db-local
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${CATALOG_DB_USER}
      POSTGRES_PASSWORD: ${CATALOG_DB_PASSWORD}
      POSTGRES_DB: ${CATALOG_DB_NAME}
    ports:
      - "${CATALOG_DB_PORT_EXTERNAL}:5432"
    volumes:
      - catalog-db-local-data:/var/lib/postgresql/data
    networks:
      - glam-local-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CATALOG_DB_USER}"]
      interval: 10s
      retries: 5
      timeout: 5s
      start_period: 10s

  # ----------------- Catalog Job Processor Database -----------------
  catalog-job-processor-db:
    image: postgres:15-alpine
    container_name: catalog-job-processor-db-local
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${CATALOG_JOB_PROCESSOR_DB_USER}
      POSTGRES_PASSWORD: ${CATALOG_JOB_PROCESSOR_DB_PASSWORD}
      POSTGRES_DB: ${CATALOG_JOB_PROCESSOR_DB_NAME}
    ports:
      - "${CATALOG_JOB_PROCESSOR_DB_PORT_EXTERNAL}:5432"
    volumes:
      - catalog-job-processor-db-local-data:/var/lib/postgresql/data
    networks:
      - glam-local-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CATALOG_JOB_PROCESSOR_DB_USER}"]
      interval: 10s
      retries: 5
      start_period: 10s

  # ----------------- Profile Database -----------------
  profile-db:
    image: postgres:15-alpine
    container_name: profile-db-local
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${PROFILE_DB_USER}
      POSTGRES_PASSWORD: ${PROFILE_DB_PASSWORD}
      POSTGRES_DB: ${PROFILE_DB_NAME}
    ports:
      - "${PROFILE_DB_EXTERNAL_PORT}:5432"
    volumes:
      - profile-db-local-data:/var/lib/postgresql/data
    networks:
      - glam-local-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PROFILE_DB_USER}"]
      interval: 10s
      retries: 5
      start_period: 10s

  # ----------------- Notification Database -----------------
  notification-db:
    image: postgres:15-alpine
    container_name: notification-db-local
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${NOTIFICATION_DB_USER}
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
      POSTGRES_DB: ${NOTIFICATION_DB_NAME}
    ports:
      - "${NOTIFICATION_DB_PORT_EXTERNAL}:5432"
    volumes:
      - notification-db-local-data:/var/lib/postgresql/data
    networks:
      - glam-local-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${NOTIFICATION_DB_USER}"]
      interval: 10s
      retries: 5
      start_period: 10s
      
  # ----------------- Catalog Database -----------------
  credit-db:
    image: postgres:15-alpine
    container_name: credit-db-local
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${CREDIT_DB_USER}
      POSTGRES_PASSWORD: ${CREDIT_DB_PASSWORD}
      POSTGRES_DB: ${CREDIT_DB_NAME}
    ports:
      - "${CREDIT_DB_PORT_EXTERNAL}:5432"
    volumes:
      - credit-db-local-data:/var/lib/postgresql/data
    networks:
      - glam-local-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CREDIT_DB_USER}"]
      interval: 10s
      retries: 5
      start_period: 10s

  webhook-db:
    image: postgres:15-alpine
    container_name: webhook-db-local
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${WEBHOOK_DB_USER}
      POSTGRES_PASSWORD: ${WEBHOOK_DB_PASSWORD}
      POSTGRES_DB: ${WEBHOOK_DB_NAME}
    ports:
      - "${WEBHOOK_DB_PORT_EXTERNAL}:5432"
    volumes:
      - webhook-db-local-data:/var/lib/postgresql/data
    networks:
      - glam-local-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${WEBHOOK_DB_USER}"]
      interval: 10s
      retries: 5
      start_period: 10s
  
  # ----------------- S3-compatible Storage (MinIO) -----------------
  minio:
    image: minio/minio:latest
    container_name: glam-minio-local
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-local-data:/data
    networks:
      - glam-local-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ----------------- MinIO Client (Setup buckets) -----------------
  minio-setup:
    image: minio/mc:latest
    container_name: glam-minio-setup-local
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/glamyouup-selfies || true;
      /usr/bin/mc mb myminio/glamyouup-images || true;
      /usr/bin/mc anonymous set public myminio/glamyouup-images;
      exit 0;
      "
    networks:
      - glam-local-net

# ----------------- Monitoring Stack -----------------
  # NATS Prometheus Exporter
  nats-exporter:
    image: natsio/prometheus-nats-exporter:latest
    container_name: glam-nats-exporter-local
    command: ["-varz", "http://nats:8222"]
    ports:
      - "7777:7777"  # Prometheus metrics
    networks:
      - glam-local-net
    depends_on:
      - nats
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:7777/metrics"]
      interval: 10s
      retries: 5
      start_period: 5s

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: glam-prometheus-local
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - glam-local-net
    depends_on:
      - nats-exporter

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: glam-grafana-local
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - glam-local-net
    depends_on:
      - prometheus

networks:
  glam-local-net:
    driver: bridge

volumes:
  nats-local-data:
  redis-local-data:
  minio-local-data:
  catalog-db-local-data:
  catalog-job-processor-db-local-data:
  profile-db-local-data:
  notification-db-local-data:
  prometheus-data:
  grafana-data:
  credit-db-local-data:
  webhook-db-local-data: