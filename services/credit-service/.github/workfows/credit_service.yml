# name: Credit Service CI/CD

# on:
#   push:
#     branches: [ main, develop ]
#     paths:
#       - 'services/credit-service/**'
#   pull_request:
#     branches: [ main ]
#     paths:
#       - 'services/credit-service/**'

# defaults:
#   run:
#     working-directory: services/credit-service

# jobs:
#   test:
#     runs-on: ubuntu-latest
    
#     services:
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_DB: test_credit_db
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 5432:5432
      
#       redis:
#         image: redis:7
#         options: >-
#           --health-cmd "redis-cli ping"
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 6379:6379

#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.11'
    
#     - name: Install Poetry
#       uses: snok/install-poetry@v1
#       with:
#         version: latest
#         virtualenvs-create: true
#         virtualenvs-in-project: true
    
#     - name: Load cached venv
#       id: cached-poetry-dependencies
#       uses: actions/cache@v3
#       with:
#         path: services/credit-service/.venv
#         key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    
#     - name: Install dependencies
#       if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#       run: poetry install --no-interaction --no-root
    
#     - name: Install project
#       run: poetry install --no-interaction
    
#     - name: Run linting
#       run: |
#         poetry run flake8 src tests
#         poetry run black --check src tests
#         poetry run isort --check src tests
#         poetry run mypy src
    
#     - name: Run tests
#       run: poetry run pytest -v --cov=src --cov-report=xml
#       env:
#         DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_credit_db
#         REDIS_URL: redis://localhost:6379
    
#     - name: Upload coverage to Codecov
#       uses: codecov/codecov-action@v3
#       with:
#         file: services/credit-service/coverage.xml
#         flags: credit-service

#   docker:
#     runs-on: ubuntu-latest
#     needs: test
#     if: github.ref == 'refs/heads/main'
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3
    
#     - name: Login to Container Registry
#       uses: docker/login-action@v3
#       with:
#         registry: ghcr.io
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}
    
#     - name: Build and push Docker image
#       uses: docker/build-push-action@v5
#       with:
#         context: services/credit-service
#         push: true
#         tags: |
#           ghcr.io/${{ github.repository }}/credit-service:latest
#           ghcr.io/${{ github.repository }}/credit-service:${{ github.sha }}
#         cache-from: type=gha
#         cache-to: type=gha,mode=max