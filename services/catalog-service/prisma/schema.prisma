// services/catalog-service/prisma/schema.prisma
generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CatalogItem {
  id                String   @id @default(uuid())
  merchant_id       String

  // Platform identifiers
  platform_name     String   // "shopify", "woocommerce"
  platform_id       String   // Shop ID in platform
  platform_domain   String   // example.myshopify.com

  // Product/Variant IDs
  product_id        String   // Platform's product ID
  variant_id        String   // Platform's variant ID
  image_id          String?  // Platform's image ID

  // Essential product data
  product_title     String
  variant_title     String
  sku               String?
  price             Decimal  @db.Decimal(10, 2)
  currency          String   @default("USD")
  inventory_quantity Int     @default(0)

  // Image reference
  image_url         String?  @db.Text

  // Status tracking
  sync_status       String   @default("pending") // pending, synced, failed
  analysis_status   String   @default("pending") // pending, analyzing, analyzed, failed, no_image

  // Timestamps
  platform_created_at DateTime?
  platform_updated_at DateTime?
  synced_at         DateTime @default(now())
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  analysis_results  AnalysisResult[]

  @@unique([merchant_id, platform_name, variant_id])
  @@index([merchant_id])
  @@index([merchant_id, analysis_status])
  @@map("catalog_items")
}

model AnalysisResult {
  id                String   @id @default(uuid())
  item_id           String
  model_version     String

  // Core categorization
  category          String?  // "shirts", "pants", "dresses"
  subcategory       String?  // "casual-shirts", "dress-shirts"
  description       String?  @db.Text
  gender            String?  // "male", "female", "unisex"

  // Structured attributes
  attributes        Json?    @db.Json

  // Quality metrics
  quality_score     Decimal? @db.Decimal(5, 4)
  confidence_score  Decimal? @db.Decimal(5, 4)
  processing_time_ms Int?
  analyzed_at       DateTime @default(now())

  // Relations
  catalog_item      CatalogItem @relation(fields: [item_id], references: [id], onDelete: Cascade)

  @@unique([item_id, model_version])
  @@index([item_id])
  @@index([category])
  @@index([quality_score])
  @@map("analysis_results")
}

model SyncOperation {
  id                String   @id @default(uuid())
  merchant_id       String
  platform_name     String
  platform_id       String
  platform_domain   String
  sync_type         String   @default("full") // full, incremental
  status            String   @default("pending") // pending, running, completed, failed, partial

  // Progress tracking
  total_products    Int      @default(0)
  processed_products Int     @default(0)
  failed_products   Int      @default(0)
  analysis_completed Int     @default(0)

  // Progress for polling
  progress_percent  Int      @default(0)
  progress_message  String?

  // Timing
  started_at        DateTime @default(now())
  completed_at      DateTime?

  // Error tracking
  error_message     String?  @db.Text

  @@index([merchant_id, status])
  @@index([merchant_id, started_at])
  @@map("sync_operations")
}
