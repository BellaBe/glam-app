generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BillingRecord {
  id                String   @id @default(uuid()) @db.Uuid
  merchant_id       String   @unique @db.Uuid
  
  // Trial management
  trial_available   Boolean  @default(true)
  trial_started_at  DateTime? @db.Timestamptz(3)
  trial_ends_at     DateTime? @db.Timestamptz(3)
  
  // Purchase tracking
  total_credits_purchased Int @default(0)
  last_purchase_at  DateTime? @db.Timestamptz(3)
  
  created_at        DateTime @default(now()) @db.Timestamptz(3)
  updated_at        DateTime @updatedAt @db.Timestamptz(3)
  
  // Relations
  purchases         CreditPurchase[]
  
  @@index([trial_ends_at])
  @@map("billing_records")
}

enum PurchaseStatus {
  pending
  completed
  failed
  expired
}

model CreditPurchase {
  id                String   @id @default(uuid()) @db.Uuid
  merchant_id       String   @db.Uuid
  
  credits           Int
  amount            String // Amount in the smallest currency unit (e.g., cents)
  status            PurchaseStatus @default(pending)
  
  platform          String?  // shopify, stripe, etc.
  platform_charge_id String? @unique  // Platform's charge reference
  
  created_at        DateTime @default(now()) @db.Timestamptz(3)
  completed_at      DateTime? @db.Timestamptz(3)
  expires_at        DateTime? @db.Timestamptz(3)  // For pending charges
  
  // Relations
  billing_record    BillingRecord @relation(fields: [merchant_id], references: [merchant_id])
  
  @@index([merchant_id])
  @@index([status])
  @@index([platform_charge_id])
  @@map("credit_purchases")
}
