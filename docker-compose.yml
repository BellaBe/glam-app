services:
  # ----------------- API Gateway -----------------
  caddy:
    image: caddy:2-alpine
    container_name: glam-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy-data:/data
      - caddy-config:/config
    environment:
      - DOMAIN=${DOMAIN:-api.glamyouup.tech}
      - EMAIL=${ACME_EMAIL:-admin@glamyouup.tech}
    restart: unless-stopped
    networks:
      - glam-net

  # ----------------- Single PostgreSQL Instance -----------------
  postgres:
    image: postgres:15-alpine
    container_name: glam-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-glam}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infrastructure/scripts/postgres-init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    networks:
      - glam-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-glam}"]
      interval: 10s
      retries: 5
      start_period: 10s

  # ----------------- Message Broker -----------------
  nats:
    image: nats:2.10.7-alpine
    container_name: glam-nats
    command: ["nats-server", "-js", "--store_dir", "/data"]
    volumes:
      - nats-data:/data
    networks:
      - glam-net
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8222/healthz"]
      interval: 10s
      retries: 5
      start_period: 10s

  # ----------------- Email Testing (Optional for dev) -----------------
  mailhog:
    image: mailhog/mailhog:latest
    container_name: glam-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - glam-net
    profiles: ["dev"]  # Only runs when explicitly requested

  # ----------------- Microservices -----------------

  analytics-service:
    build:
      context: .
      dockerfile: services/analytics-service/Dockerfile
    container_name: analytics-service
    depends_on:
      - postgres
      - nats
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-glam}:${POSTGRES_PASSWORD}@postgres:5432/analytics_db
      APP_ENV: ${APP_ENV:-production}
      NATS_URL: nats://nats:4222
    networks:
      - glam-net
    restart: unless-stopped

  billing-service:
    build:
      context: .
      dockerfile: services/billing-service/Dockerfile
    container_name: billing-service
    depends_on:
      - postgres
      - nats
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-glam}:${POSTGRES_PASSWORD}@postgres:5432/billing_db
      APP_ENV: ${APP_ENV:-production}
      CLIENT_JWT_SECRET: ${JWT_SECRET}
      NATS_URL: nats://nats:4222
      STRIPE_API_KEY: ${STRIPE_API_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
    networks:
      - glam-net
    restart: unless-stopped

  catalog-service:
    build:
      context: .
      dockerfile: services/catalog-service/Dockerfile
    container_name: catalog-service
    depends_on:
      - postgres
      - nats
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-glam}:${POSTGRES_PASSWORD}@postgres:5432/catalog_db
      APP_ENV: ${APP_ENV:-production}
      CLIENT_JWT_SECRET: ${JWT_SECRET}
      NATS_URL: nats://nats:4222
    networks:
      - glam-net
    restart: unless-stopped

  catalog-ai-analyzer:
    build:
      context: .
      dockerfile: services/catalog-ai-analyzer/Dockerfile
    container_name: catalog-ai-analyzer
    depends_on:
      - nats
    environment:
      APP_ENV: ${APP_ENV:-production}
      NATS_URL: nats://nats:4222
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    networks:
      - glam-net
    restart: unless-stopped

  catalog-connector:
    build:
      context: .
      dockerfile: services/catalog-connector/Dockerfile
    container_name: catalog-connector
    depends_on:
      - nats
    environment:
      APP_ENV: ${APP_ENV:-production}
      NATS_URL: nats://nats:4222
      TOKEN_SERVICE_URL: http://token-service:8000
    networks:
      - glam-net
    restart: unless-stopped

  credit-service:
    build:
      context: .
      dockerfile: services/credit-service/Dockerfile
    container_name: credit-service
    depends_on:
      - postgres
      - nats
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-glam}:${POSTGRES_PASSWORD}@postgres:5432/credit_db
      APP_ENV: ${APP_ENV:-production}
      CLIENT_JWT_SECRET: ${JWT_SECRET}
      NATS_URL: nats://nats:4222
    networks:
      - glam-net
    restart: unless-stopped

  merchant-service:
    build:
      context: .
      dockerfile: services/merchant-service/Dockerfile
    container_name: merchant-service
    depends_on:
      - postgres
      - nats
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-glam}:${POSTGRES_PASSWORD}@postgres:5432/merchant_db
      APP_ENV: ${APP_ENV:-production}
      CLIENT_JWT_SECRET: ${JWT_SECRET}
      NATS_URL: nats://nats:4222
    networks:
      - glam-net
    restart: unless-stopped

  notification-service:
    build:
      context: .
      dockerfile: services/notification-service/Dockerfile
    container_name: notification-service
    depends_on:
      - postgres
      - nats
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-glam}:${POSTGRES_PASSWORD}@postgres:5432/notification_db
      APP_ENV: ${APP_ENV:-production}
      NATS_URL: nats://nats:4222
      SMTP_HOST: ${SMTP_HOST:-mailhog}
      SMTP_PORT: ${SMTP_PORT:-1025}
      EMAIL_FROM: ${NOTIFICATION_EMAIL_FROM:-noreply@glamyouup.tech}
    networks:
      - glam-net
    restart: unless-stopped

  recommendation-service:
    build:
      context: .
      dockerfile: services/recommendation-service/Dockerfile
    container_name: recommendation-service
    depends_on:
      - postgres
      - nats
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-glam}:${POSTGRES_PASSWORD}@postgres:5432/recommendation_db
      APP_ENV: ${APP_ENV:-production}
      NATS_URL: nats://nats:4222
      SEASON_COMPATIBILITY_SERVICE_URL: http://season-compatibility-service:8000
    networks:
      - glam-net
    restart: unless-stopped

  season-compatibility-service:
    build:
      context: .
      dockerfile: services/season-compatibility-service/Dockerfile
    container_name: season-compatibility-service
    depends_on:
      - postgres
      - nats
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-glam}:${POSTGRES_PASSWORD}@postgres:5432/season_compatibility_db
      APP_ENV: ${APP_ENV:-production}
      CLIENT_JWT_SECRET: ${JWT_SECRET}
      NATS_URL: nats://nats:4222
    networks:
      - glam-net
    restart: unless-stopped

  selfie-service:
    build:
      context: .
      dockerfile: services/selfie-service/Dockerfile
    container_name: selfie-service
    depends_on:
      - postgres
      - nats
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-glam}:${POSTGRES_PASSWORD}@postgres:5432/selfie_db
      APP_ENV: ${APP_ENV:-production}
      CLIENT_JWT_SECRET: ${JWT_SECRET}
      NATS_URL: nats://nats:4222
      SELFIE_AI_ANALYZER_URL: http://selfie-ai-analyzer:8000
    networks:
      - glam-net
    restart: unless-stopped

  selfie-ai-analyzer:
    build:
      context: .
      dockerfile: services/selfie-ai-analyzer/Dockerfile
    container_name: selfie-ai-analyzer
    depends_on:
      - nats
    environment:
      APP_ENV: ${APP_ENV:-production}
      NATS_URL: nats://nats:4222
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
    networks:
      - glam-net
    restart: unless-stopped

  token-service:
    build:
      context: .
      dockerfile: services/token-service/Dockerfile
    container_name: token-service
    depends_on:
      - postgres
      - nats
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-glam}:${POSTGRES_PASSWORD}@postgres:5432/token_db
      APP_ENV: ${APP_ENV:-production}
      CLIENT_JWT_SECRET: ${JWT_SECRET}
      NATS_URL: nats://nats:4222
      ENCRYPTION_KEY: ${TOKEN_ENCRYPTION_KEY}
    networks:
      - glam-net
    restart: unless-stopped

  webhook-service:
    build:
      context: .
      dockerfile: services/webhook-service/Dockerfile
    container_name: webhook-service
    depends_on:
      - postgres
      - nats
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-glam}:${POSTGRES_PASSWORD}@postgres:5432/webhook_db
      APP_ENV: ${APP_ENV:-production}
      CLIENT_JWT_SECRET: ${JWT_SECRET}
      NATS_URL: nats://nats:4222
      SHOPIFY_WEBHOOK_SECRET: ${SHOPIFY_WEBHOOK_SECRET}
    networks:
      - glam-net
    restart: unless-stopped

networks:
  glam-net:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  nats-data:
  caddy-data:
  caddy-config:
