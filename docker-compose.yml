services:
  # ----------------- Infrastructure Services -----------------
  nats:
    image: nats:2.10.7-alpine
    container_name: glam-nats
    ports:
      - "4222:4222"
      - "8222:8222"
    command: ["nats-server", "-m", "8222", "-js", "--store_dir", "/data"]
    volumes:
      - nats-data:/data
    networks:
      - glam-net
    healthcheck:
      test: ["CMD", "nats-server", "-v"]
      interval: 10s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: glam-redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    networks:
      - glam-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 10s

  # ----------------- Catalog Service -----------------
  catalog-db:
    image: postgres:15-alpine
    container_name: catalog-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${CATALOG_DB_USER}
      POSTGRES_PASSWORD: ${CATALOG_DB_PASSWORD}
      POSTGRES_DB: ${CATALOG_DB_NAME}
    ports:
      - "${CATALOG_DB_PORT_EXTERNAL}:5432"
    volumes:
      - catalog-db-data:/var/lib/postgresql/data
    networks:
      - glam-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CATALOG_DB_USER}"]
      interval: 10s
      retries: 5
      timeout: 5s
      start_period: 10s

  catalog-service:
    build:
      context: .
      dockerfile: services/catalog-service/Dockerfile
      args:
        CACHE_BUSTER: ${CACHE_BUSTER:-1}
    container_name: catalog-service
    depends_on:
      nats:
        condition: service_healthy
      catalog-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # Database
      CATALOG_DB_USER: ${CATALOG_DB_USER}
      CATALOG_DB_PASSWORD: ${CATALOG_DB_PASSWORD}
      CATALOG_DB_NAME: ${CATALOG_DB_NAME}
      CATALOG_DB_HOST: catalog-db
      CATALOG_DB_PORT: 5432
      # NATS
      CATALOG_NATS_URL: nats://nats:4222
      # Redis
      CATALOG_REDIS_URL: redis://redis:6379
      # Service
      SERVICE_NAME: catalog-service
      EXTERNAL_PORT: 8001
      JWT_SECRET: ${JWT_SECRET}
      APP_ENV: ${APP_ENV:-prod}
    ports:
      - "8001:8000"
    networks:
      - glam-net

  # ----------------- Catalog Job Processor -----------------
  catalog-job-processor-db:
    image: postgres:15-alpine
    container_name: catalog-job-processor-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${CATALOG_JOB_PROCESSOR_DB_USER}
      POSTGRES_PASSWORD: ${CATALOG_JOB_PROCESSOR_DB_PASSWORD}
      POSTGRES_DB: ${CATALOG_JOB_PROCESSOR_DB_NAME}
    ports:
      - "${CATALOG_JOB_PROCESSOR_DB_PORT_EXTERNAL}:5432"
    volumes:
      - catalog-job-processor-db-data:/var/lib/postgresql/data
    networks:
      - glam-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CATALOG_JOB_PROCESSOR_DB_USER}"]
      interval: 10s
      retries: 5
      start_period: 10s

  catalog-job-processor:
    build:
      context: .
      dockerfile: services/catalog-job-processor/Dockerfile
      args:
        CACHE_BUSTER: ${CACHE_BUSTER:-1}
    container_name: catalog-job-processor
    depends_on:
      nats:
        condition: service_healthy
      catalog-job-processor-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # Database
      CATALOG_JOB_PROCESSOR_DB_USER: ${CATALOG_JOB_PROCESSOR_DB_USER}
      CATALOG_JOB_PROCESSOR_DB_PASSWORD: ${CATALOG_JOB_PROCESSOR_DB_PASSWORD}
      CATALOG_JOB_PROCESSOR_DB_NAME: ${CATALOG_JOB_PROCESSOR_DB_NAME}
      CATALOG_JOB_PROCESSOR_DB_HOST: catalog-job-processor-db
      CATALOG_JOB_PROCESSOR_DB_PORT: 5432
      # NATS
      CATALOG_JOB_PROCESSOR_NATS_URL: nats://nats:4222
      # Redis
      CATALOG_JOB_PROCESSOR_REDIS_URL: redis://redis:6379
      # Service
      SERVICE_NAME: catalog-job-processor
      APP_ENV: ${APP_ENV:-prod}
    networks:
      - glam-net

  # ----------------- Catalog Connector -----------------
  catalog-connector:
    build:
      context: .
      dockerfile: services/catalog-connector/Dockerfile
      args:
        CACHE_BUSTER: ${CACHE_BUSTER:-1}
    container_name: catalog-connector
    depends_on:
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # NATS
      CATALOG_CONNECTOR_NATS_URL: nats://nats:4222
      # Redis (for rate limiting)
      CATALOG_CONNECTOR_REDIS_URL: redis://redis:6379
      # Shopify
      SHOPIFY_API_VERSION: ${SHOPIFY_API_VERSION}
      # Service
      SERVICE_NAME: catalog-connector
      APP_ENV: ${APP_ENV:-prod}
    networks:
      - glam-net

  # ----------------- Catalog Image Cache -----------------
  catalog-image-cache:
    build:
      context: .
      dockerfile: services/catalog-image-cache/Dockerfile
      args:
        CACHE_BUSTER: ${CACHE_BUSTER:-1}
    container_name: catalog-image-cache
    depends_on:
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # NATS
      CATALOG_IMAGE_CACHE_NATS_URL: nats://nats:4222
      # Redis
      CATALOG_IMAGE_CACHE_REDIS_URL: redis://redis:6379
      # Local Storage
      CACHE_DIR: /app/image-cache
      CACHE_MAX_SIZE_GB: ${CACHE_MAX_SIZE_GB:-100}
      CACHE_CLEANUP_SCHEDULE: "0 2 * * *"  # 2 AM daily
      CACHE_TTL_HOURS: 24
      # Service
      SERVICE_NAME: catalog-image-cache
      APP_ENV: ${APP_ENV:-prod}
    networks:
      - glam-net
    volumes:
      - catalog-image-cache:/app/image-cache

  # ----------------- Catalog AI Apparel Service -----------------
  catalog-ai-apparel:
    build:
      context: .
      dockerfile: services/catalog-ai-apparel/Dockerfile
      args:
        CACHE_BUSTER: ${CACHE_BUSTER:-1}
    container_name: catalog-ai-apparel
    depends_on:
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # NATS
      CATALOG_AI_APPAREL_NATS_URL: nats://nats:4222
      # Redis
      CATALOG_AI_APPAREL_REDIS_URL: redis://redis:6379
      # AI Model
      MODEL_PATH: ${MODEL_PATH:-/app/models}
      MODEL_VERSION: ${MODEL_VERSION:-resnet50_v3}
      GPU_ENABLED: ${GPU_ENABLED:-false}
      # Service
      SERVICE_NAME: catalog-ai-apparel
      APP_ENV: ${APP_ENV:-prod}
    networks:
      - glam-net
    volumes:
      - ai-apparel-models:/app/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # ----------------- Profile Service -----------------
  profile-db:
    image: postgres:15-alpine
    container_name: profile-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${PROFILE_DB_USER}
      POSTGRES_PASSWORD: ${PROFILE_DB_PASSWORD}
      POSTGRES_DB: ${PROFILE_DB_NAME}
    ports:
      - "${PROFILE_DB_EXTERNAL_PORT}:5432"
    volumes:
      - profile-db-data:/var/lib/postgresql/data
    networks:
      - glam-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PROFILE_DB_USER}"]
      interval: 10s
      retries: 5
      start_period: 10s

  profile-service:
    build:
      context: .
      dockerfile: services/profile-service/Dockerfile
      args:
        CACHE_BUSTER: ${CACHE_BUSTER:-1}
    container_name: profile-service
    depends_on:
      nats:
        condition: service_healthy
      profile-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # Database
      PROFILE_DB_USER: ${PROFILE_DB_USER}
      PROFILE_DB_PASSWORD: ${PROFILE_DB_PASSWORD}
      PROFILE_DB_NAME: ${PROFILE_DB_NAME}
      PROFILE_DB_HOST: profile-db
      PROFILE_DB_PORT: 5432
      # NATS
      PROFILE_NATS_URL: nats://nats:4222
      # Redis
      PROFILE_REDIS_URL: redis://redis:6379
      # Storage
      S3_BUCKET: ${S3_BUCKET:-glamyouup-selfies}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      TEMP_STORAGE_DIR: /tmp/selfies
      # Service
      SERVICE_NAME: profile-service
      EXTERNAL_PORT: 8007
      JWT_SECRET: ${JWT_SECRET}
      APP_ENV: ${APP_ENV:-prod}
    ports:
      - "8007:8000"
    networks:
      - glam-net
    volumes:
      - profile-temp-storage:/tmp/selfies

  # ----------------- Profile AI Selfie Service -----------------
  profile-ai-selfie:
    build:
      context: .
      dockerfile: services/profile-ai-selfie/Dockerfile
      args:
        CACHE_BUSTER: ${CACHE_BUSTER:-1}
    container_name: profile-ai-selfie
    depends_on:
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # NATS
      PROFILE_AI_SELFIE_NATS_URL: nats://nats:4222
      # Redis
      PROFILE_AI_SELFIE_REDIS_URL: redis://redis:6379
      # AI Model
      MODEL_PATH: ${SELFIE_MODEL_PATH:-/app/models}
      MODEL_NAME: antelopev2
      GPU_ENABLED: ${GPU_ENABLED:-false}
      # Storage access (for reading selfie files)
      S3_BUCKET: ${S3_BUCKET:-glamyouup-selfies}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      TEMP_STORAGE_DIR: /tmp/selfies
      # Service
      SERVICE_NAME: profile-ai-selfie
      APP_ENV: ${APP_ENV:-prod}
    networks:
      - glam-net
    volumes:
      - profile-ai-models:/app/models
      - profile-temp-storage:/tmp/selfies:ro  # Read-only access to temp selfies
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

# ----------------- Notification Service -----------------
  notification-db:
    image: postgres:15-alpine
    container_name: notification-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${NOTIFICATION_DB_USER}
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
      POSTGRES_DB: ${NOTIFICATION_DB_NAME}
    ports:
      - "${NOTIFICATION_DB_PORT_EXTERNAL}:5432"
    volumes:
      - notification-db-data:/var/lib/postgresql/data
    networks:
      - glam-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${NOTIFICATION_DB_USER}"]
      interval: 10s
      retries: 5
      start_period: 10s

  notification-service:
    build:
      context: .
      dockerfile: services/notification-service/Dockerfile
      args:
        CACHE_BUSTER: ${CACHE_BUSTER:-1}
    container_name: notification-service
    depends_on:
      nats:
        condition: service_healthy
      notification-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # Database - prefixed for consistency
      NOTIFICATION_DB_USER: ${NOTIFICATION_DB_USER}
      NOTIFICATION_DB_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
      NOTIFICATION_DB_NAME: ${NOTIFICATION_DB_NAME}
      NOTIFICATION_DB_HOST: notification-db
      NOTIFICATION_DB_PORT: 5432
      # NATS
      NOTIFICATION_NATS_URL: nats://nats:4222
      # Redis
      NOTIFICATION_REDIS_URL: redis://redis:6379
      # Email Configuration
      NOTIFICATION_EMAIL_PROVIDER: ${NOTIFICATION_EMAIL_PROVIDER:-smtp}
      NOTIFICATION_SMTP_HOST: ${NOTIFICATION_SMTP_HOST:-smtp.sendgrid.net}
      NOTIFICATION_SMTP_PORT: ${NOTIFICATION_SMTP_PORT:-587}
      NOTIFICATION_SMTP_USERNAME: ${NOTIFICATION_SMTP_USERNAME}
      NOTIFICATION_SMTP_PASSWORD: ${NOTIFICATION_SMTP_PASSWORD}
      NOTIFICATION_SENDGRID_API_KEY: ${NOTIFICATION_SENDGRID_API_KEY}
      NOTIFICATION_EMAIL_FROM_ADDRESS: ${NOTIFICATION_EMAIL_FROM_ADDRESS}
      NOTIFICATION_EMAIL_FROM_NAME: ${NOTIFICATION_EMAIL_FROM_NAME}
      NOTIFICATION_EMAIL_RATE_LIMIT_PER_HOUR: ${NOTIFICATION_EMAIL_RATE_LIMIT_PER_HOUR:-100}
      NOTIFICATION_EMAIL_RATE_LIMIT_PER_DAY: ${NOTIFICATION_EMAIL_RATE_LIMIT_PER_DAY:-1000}
      # Service Configuration
      NOTIFICATION_SERVICE_NAME: notification-service
      NOTIFICATION_EXTERNAL_PORT: 8002
      JWT_SECRET: ${JWT_SECRET}
      APP_ENV: ${APP_ENV:-prod}
      ENABLE_METRICS: ${ENABLE_METRICS}
      ENABLE_TRACING: ${ENABLE_TRACING}
    ports:
      - "8002:8000"
    networks:
      - glam-net
  
networks:
  glam-net:
    driver: bridge

volumes:
  nats-data:
  redis-data:
  catalog-db-data:
  catalog-job-processor-db-data:
  catalog-image-cache:
  ai-apparel-models:
  profile-db-data:
  profile-temp-storage:
  profile-ai-models:
  notification-db-data: